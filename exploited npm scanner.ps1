# List of packages and versions to check
$packages = @{
    "ansi-regex" = "6.2.1"
    "ansi-styles" = "6.2.2"
    "backslash" = "0.2.1"
    "chalk" = "5.6.1"
    "chalk-template" = "1.1.1"
    "color-convert" = "3.1.1"
    "color-name" = "2.0.1"
    "color-string" = "2.1.1"
    "debug" = "4.4.2"
    "error-ex" = "1.3.3"
    "has-ansi" = "6.0.1"
    "is-arrayish" = "0.3.3"
    "simple-swizzle" = "0.2.3"
    "slice-ansi" = "7.1.1"
    "strip-ansi" = "7.1.1"
    "supports-color" = "10.2.1"
    "supports-hyperlinks" = "4.1.1"
    "wrap-ansi" = "9.0.1"
}

Write-Host "Scanning system for specified npm packages..." -ForegroundColor Cyan

# Find all package.json files on the system
$packageFiles = Get-ChildItem -Path C:\ -Recurse -Filter "package.json" -ErrorAction SilentlyContinue

foreach ($file in $packageFiles) {
    try {
        $json = Get-Content $file.FullName -Raw | ConvertFrom-Json -ErrorAction Stop

        foreach ($pkg in $packages.Keys) {
            $expected = $packages[$pkg]

            # Check dependencies and devDependencies
            $found = $null
            if ($json.dependencies.$pkg) { $found = $json.dependencies.$pkg }
            elseif ($json.devDependencies.$pkg) { $found = $json.devDependencies.$pkg }

            if ($found -eq $expected) {
                Write-Host "FOUND: $pkg@$expected in $($file.FullName)" -ForegroundColor Green
            }
        }
    } catch {
        # Ignore JSON parse errors
    }
}

Write-Host "Scan completed." -ForegroundColor Yellow
Write-Host "`nScan completed. Press Enter to exit..." -ForegroundColor Yellow
Read-Host
